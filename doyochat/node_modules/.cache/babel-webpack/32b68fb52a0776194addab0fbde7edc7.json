{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/User/project/DOYOChat/doyochat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { DrawService } from '../services/draw.service';\nimport { LoginComponent } from './login.component';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let service;\n  let router;\n  let draw;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    router = jasmine.createSpyObj('Router', ['navigate']);\n    service = jasmine.createSpyObj('AuthService', ['login']);\n    draw = jasmine.createSpyObj('DrawService', ['setGameMode']);\n    yield TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      providers: [{\n        provide: AuthService,\n        useValue: service\n      }, {\n        provide: Router,\n        useValue: router\n      }, {\n        provide: DrawService,\n        useValue: draw\n      }],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should init form', () => {\n    component.initForm();\n    expect(component.form).toBeDefined();\n  });\n  it('should has errors of form', () => {\n    component.form = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(35), Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(35), Validators.pattern('^[A-Za-z0-9]+$')])\n    });\n    component.form.setValue({\n      email: 'newgmail.com',\n      password: '111811111115'\n    });\n    expect(component.form.valid).toBeFalsy();\n  });\n  it('should call auth login method', () => {\n    service.login = jasmine.createSpy().and.returnValue(of('response'));\n    router.navigate = jasmine.createSpy().and.returnValue(new Promise(() => true));\n    component.login();\n    expect(component.form.value).toBeTruthy();\n    expect(service.login).toHaveBeenCalled();\n    expect(router.navigate).toHaveBeenCalledWith(['/home']);\n  });\n  it('should return answer from server', () => {\n    service.login = jasmine.createSpy().and.returnValue(of('error'));\n    component.form.setValue({\n      email: 'new@gmail.com',\n      password: '111811111115'\n    });\n    expect(component.login()).toBeDefined();\n  });\n  it('should navigate to default page', () => {\n    spyOn(component.form, 'value').and.returnValue(false);\n    router.navigate = jasmine.createSpy().and.returnValue(new Promise(() => true));\n    component.login();\n    expect(router.navigate).toHaveBeenCalledWith(['']);\n  });\n});","map":{"version":3,"sources":["C:/Users/User/project/DOYOChat/doyochat/src/app/login/login.component.spec.ts"],"names":["CUSTOM_ELEMENTS_SCHEMA","TestBed","FormGroup","FormControl","Validators","Router","of","AuthService","DrawService","LoginComponent","describe","component","fixture","service","router","draw","beforeEach","jasmine","createSpyObj","configureTestingModule","declarations","providers","provide","useValue","schemas","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","initForm","form","toBeDefined","email","required","minLength","maxLength","password","pattern","setValue","valid","toBeFalsy","login","createSpy","and","returnValue","navigate","Promise","value","toHaveBeenCalled","toHaveBeenCalledWith","spyOn"],"mappings":"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","sourcesContent":["import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { of } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { DrawService } from '../services/draw.service';\r\nimport { LoginComponent } from './login.component';\r\ndescribe('LoginComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let service;\r\n    let router;\r\n    let draw;\r\n    beforeEach(async () => {\r\n        router = jasmine.createSpyObj('Router', ['navigate']);\r\n        service = jasmine.createSpyObj('AuthService', ['login']);\r\n        draw = jasmine.createSpyObj('DrawService', ['setGameMode']);\r\n        await TestBed.configureTestingModule({\r\n            declarations: [LoginComponent],\r\n            providers: [\r\n                {\r\n                    provide: AuthService,\r\n                    useValue: service\r\n                },\r\n                {\r\n                    provide: Router,\r\n                    useValue: router\r\n                },\r\n                {\r\n                    provide: DrawService,\r\n                    useValue: draw\r\n                }\r\n            ],\r\n            schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(LoginComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('should init form', () => {\r\n        component.initForm();\r\n        expect(component.form).toBeDefined();\r\n    });\r\n    it('should has errors of form', () => {\r\n        component.form = new FormGroup({\r\n            email: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(35), Validators.email]),\r\n            password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(35), Validators.pattern('^[A-Za-z0-9]+$')])\r\n        });\r\n        component.form.setValue({ email: 'newgmail.com', password: '111811111115' });\r\n        expect(component.form.valid).toBeFalsy();\r\n    });\r\n    it('should call auth login method', () => {\r\n        service.login = jasmine.createSpy().and.returnValue(of('response'));\r\n        router.navigate = jasmine.createSpy().and.returnValue(new Promise(() => true));\r\n        component.login();\r\n        expect(component.form.value).toBeTruthy();\r\n        expect(service.login).toHaveBeenCalled();\r\n        expect(router.navigate).toHaveBeenCalledWith(['/home']);\r\n    });\r\n    it('should return answer from server', () => {\r\n        service.login = jasmine.createSpy().and.returnValue(of('error'));\r\n        component.form.setValue({ email: 'new@gmail.com', password: '111811111115' });\r\n        expect(component.login()).toBeDefined();\r\n    });\r\n    it('should navigate to default page', () => {\r\n        spyOn(component.form, 'value').and.returnValue(false);\r\n        router.navigate = jasmine.createSpy().and.returnValue(new Promise(() => true));\r\n        component.login();\r\n        expect(router.navigate).toHaveBeenCalledWith(['']);\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}