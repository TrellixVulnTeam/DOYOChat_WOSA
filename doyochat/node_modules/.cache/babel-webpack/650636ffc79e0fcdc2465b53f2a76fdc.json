{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport { User } from './models/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let IoService = /*#__PURE__*/(() => {\n  class IoService {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n      this.players = [];\n      this.selected_frames = 3;\n      this.selected_players = 3;\n      this.selected_time = 30000;\n      this.host = true;\n      this.stage = 0;\n      this.messages = [];\n    }\n\n    leave(username) {\n      this.socket.emit('leave', username);\n    }\n\n    deleteUser(username) {\n      this.socket.emit('deleteUser', username);\n    }\n\n    deleteRoom() {\n      this.socket.emit('deleteRoom');\n    }\n\n    connectSocket() {\n      this.socket.emit(\"hello\", 'lover of Snezhnaya');\n    }\n\n    setSettings(type, value) {\n      console.log(\"setSettings = \", type, value);\n      this.socket.emit(\"setting\", {\n        type: type,\n        value: value\n      });\n    }\n\n    startGame() {\n      this.socket.emit('start');\n      console.log('startGame is called');\n    }\n\n    finishDraw(image) {\n      console.log('next emit');\n      console.log(image);\n      this.socket.emit('next', {\n        stage: this.stage,\n        image: image\n      });\n    }\n\n    sendMessage(username, value) {\n      this.socket.emit('message', {\n        username: username,\n        value: value\n      });\n      this.messages.push({\n        username: username,\n        value: value\n      });\n      console.log('message emit has been called');\n    }\n\n    initSocket(settings) {\n      let token = this.authService.getAccessToken();\n      this.socket = io(\"http://51.124.249.185\", {\n        path: '/socket/socket.io',\n        query: {\n          token\n        }\n      });\n      this.socket.on(\"connect\", () => {\n        console.log('socketInit');\n        console.log(this.socket.id);\n        this.socket.on(\"add\", resp => {\n          console.log('addddddddddddddddddddddddddd');\n          let user = new User(resp.username, resp.icon, resp.experience);\n          this.players.push(user); //console.log(this.players)\n        });\n        this.socket.on(\"setting\", resp => {\n          if (resp.type == 'players_num') this.selected_players = resp.value;\n          if (resp.type == 'frames_num') this.selected_frames = resp.value;\n          if (resp.type == 'game_time') this.selected_time = resp.value;\n          console.log(resp);\n        });\n        this.socket.on(\"init\", resp => {\n          console.log(resp);\n          this.players = resp.players;\n          this.selected_players = resp.settings.players_num;\n          this.selected_frames = resp.settings.frames_num;\n          this.selected_time = resp.settings.game_time;\n          this.setRole(false);\n          this.host = false;\n          this.router.navigate(['room']);\n        });\n        this.socket.on('leave', username => {\n          console.log('username', username);\n          if (username) this.players = this.players.filter(player => {\n            return player.username !== username;\n          });else {\n            this.router.navigate(['home']);\n            this.players = [];\n          }\n        });\n        this.socket.on('deleteUser', () => {\n          alert('Хост удалил вас из комнаты');\n          this.router.navigate(['home']);\n          this.players = [];\n        });\n        this.socket.on('deleteRoom', () => {\n          if (!this.host) alert('Хост удалил комнату');\n          this.router.navigate(['home']);\n          this.players = [];\n        });\n        this.socket.on('deleteRoom', () => {\n          if (!this.host) alert('Хост удалил комнату');\n          this.router.navigate(['home']);\n          this.players = [];\n        });\n        this.socket.on('message', message => {\n          console.log(message.username);\n          console.log(message.value);\n          this.messages.push({\n            username: message.username,\n            value: message.value\n          });\n        });\n        this.socket.on('next', resp => {\n          this.background = resp;\n          this.stage++;\n          console.log(this.background);\n          let currentUrl = this.router.url;\n\n          this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n          this.router.onSameUrlNavigation = 'reload';\n          this.router.navigate([currentUrl]);\n        });\n        this.socket.on('start', () => {\n          this.background = '';\n          this.router.navigate(['draw']);\n        });\n        this.socket.on('finish', () => {\n          this.router.navigate(['room']);\n        });\n      });\n      this.socket.emit(\"init\", settings);\n    }\n\n    setRole(host) {\n      localStorage.setItem('host', JSON.stringify(host));\n    }\n\n    getRole() {\n      return JSON.parse(localStorage.getItem('host'));\n    }\n\n  }\n\n  IoService.ɵfac = function IoService_Factory(t) {\n    return new (t || IoService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  IoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IoService,\n    factory: IoService.ɵfac,\n    providedIn: 'root'\n  });\n  return IoService;\n})();","map":null,"metadata":{},"sourceType":"module"}